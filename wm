#!/bin/sh
WROOT=$TMPDIR/wm/groups.d
WSTATUS=$TMPDIR/wm/status.d
WNUMBER=5

usage() {
	echo "$(basename $0) [-h] [-admtu <gid>]"
}

add_to_group() {
	:> $WROOT/$2/$1
	show_group $2
}

remove_from_group() {
	test "$2" = "all" \
	&& rm -f $WROOT/*/$1 \
	|| rm -f $WROOT/$2/$1
}

find_group() {
	file=$(find $WROOT -name "$1")
	test -n "$file" && basename $(dirname $file)
}

show_group() {
	for file in $WROOT/$1/*; do
			wid=$(basename $file)
			mapw -m $wid
	done
	echo 1 > $WSTATUS/$1
}

hide_group() {
	for file in $WROOT/$1/*; do
			wid=$(basename $file)
			mapw -u $wid
	done
	echo 0 > $WSTATUS/$1
}

togg_group() {
	wid=$(ls -1 $WROOT/$1 | sed 1q)

	test -z "$wid" && return
	wattr m $wid \
		&& hide_group $1 \
		|| show_group $1
}

check_groups_sanity() {
	for gid in $(seq 1 $WNUMBER); do
			test -d $WROOT/$gid || mkdir -p $WROOT/$gid
	done

	for file in $(find $WROOT -type f); do
		wid=$(basename $file)
		wattr $wid || rm -f $file
	done

	for ws in $(seq 1 $WNUMBER); do
		if [ $(find $WROOT/$ws -maxdepth 0 -type d -empty) ]; then
			echo 0 > $WSTATUS/$ws
		fi
	done
}

check_groups_sanity

while getopts ":a:wd:ghm:t:u:" opt; do
	case $opt in
		a) add_to_group `pfw` $OPTARG ;;
		d) remove_from_group `pfw` $OPTARG ;;
		g) find_group `pfw` ;;
		m) show_group $OPTARG ;;
		t) togg_group $OPTARG ;;
		u) hide_group $OPTARG ;;
		*) usage && exit 0;;
	esac
done

# in case no argument is given, display the whole tree
test $# -eq 0 && tree --noreport $WROOT
